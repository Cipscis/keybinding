{"version":3,"sources":["webpack://keybinding/./KeyBind.js","webpack://keybinding/./KeyPress.js","webpack://keybinding/./keybinding.js","webpack://keybinding/./docs/assets/js/src/main.js"],"names":["KeyBind","Array","constructor","bindingString","RangeError","super","bindings","trim","split","binding","this","push","toString","join","match","keyPresses","length","i","keyPress","entries","keyBind","Patterns","Object","freeze","alt","ctrl","shift","Aliases","KeyPress","options","key","modifiers","altKey","ctrlKey","metaKey","shiftKey","keyString","requiredModifiers","test","replace","modifier","toLowerCase","Map","defaults","allowInInput","createFnWrapper","fn","opts","assign","keyLog","e","includes","isInput","document","activeElement","isProtected","splice","apply","arguments","bind","has","set","keyStringBindings","get","fnWrapper","addEventListener","unbind","removeEventListener","delete","$element","nodeName","inputType","attributes","type","value","isContentEditable","setMessage","message","querySelector","textContent","konamiCode","cheat","kPress"],"mappings":"mBAAA,MAAMA,UAAgBC,MACrBC,YAAYC,GACX,GAA+B,iBAAlBA,EACZ,MAAM,IAAIC,WAAW,kDAGtBC,MAAM,GAEN,MAAMC,EAAWH,EAAcI,OAAOC,MAAM,QAE5C,IAAK,MAAMC,KAAWH,EACrBI,KAAKC,KAAKF,GAIZG,WACC,OAAOF,KAAKG,KAAK,KAGlBC,MAAMC,GACL,GAAIA,EAAWC,SAAWN,KAAKM,OAC9B,OAAO,EAGR,IAAK,MAAOC,EAAGC,KAAaH,EAAWI,UAAW,CACjD,MAAMC,EAAUV,KAAKO,GAErB,IAAKC,EAASJ,MAAMM,GACnB,OAAO,EAIT,OAAO,GChCT,MAAMC,EAAWC,OAAOC,OAAO,CAC9BC,IAAK,WACLC,KAAM,uCACNC,MAAO,eAGFC,EAAUL,OAAOC,OAAO,CAC7B,MAAS,IACT,SAAY,IAEZ,GAAM,UACN,MAAS,aACT,KAAQ,YACR,KAAQ,YAER,IAAO,WAGR,MAAMK,EACL1B,YAAY2B,GACX,KAAM,QAASA,GACd,MAAM,IAAIzB,WAAW,sCAEtBM,KAAKoB,IAAMD,EAAQC,IACnBpB,KAAKqB,UAAY,CAChBC,OAAQH,EAAQG,SAAU,EAC1BC,QAASJ,EAAQK,SAAWL,EAAQI,UAAW,EAC/CE,SAAUN,EAAQM,WAAY,GAIhCrB,MAAMsB,GACL,MAAMC,EAAoB,CACzBL,QAAQ,EACRC,SAAS,EACTE,UAAU,GAIPd,EAASG,IAAIc,KAAKF,KACrBC,EAAkBL,QAAS,EAC3BI,EAAYA,EAAUG,QAAQlB,EAASG,IAAK,KAGzCH,EAASI,KAAKa,KAAKF,KACtBC,EAAkBJ,SAAU,EAC5BG,EAAYA,EAAUG,QAAQlB,EAASI,KAAM,KAG1CJ,EAASK,MAAMY,KAAKF,KACvBC,EAAkBF,UAAW,EAC7BC,EAAYA,EAAUG,QAAQlB,EAASK,MAAO,KAI/C,IAAK,MAAMc,KAAYH,EACtB,GAAIA,EAAkBG,KAAc9B,KAAKqB,UAAUS,GAElD,OAAO,EAKT,OAAIJ,EAAUK,gBAAkB/B,KAAKoB,IAAIW,eAKrCd,EAAQS,EAAUK,iBAAmB/B,KAAKoB,IAAIW,eCjEpD,MAAMnC,EAAW,IAAIoC,IASfC,EAAWrB,OAAOC,OAAO,CAC9BqB,cAAc,IAGTC,EAAkB,CAACT,EAAWU,EAAIC,KACvC,MAAMlB,EAAUP,OAAO0B,OAAO,GAAIL,EAAUI,GAEtC3B,EAAU,IAAIpB,EAAQoC,GACtBa,EAAS,GAEf,OAAO,SAAUC,GAEhB,GAAI,CAAC,MAAO,UAAW,OAAQ,SAASC,SAASD,EAAEpB,KAClD,OAID,IAAMD,EAAQe,cAAiBQ,EAAQC,SAASC,eAC/C,OAGD,GAAIC,EAAYF,SAASC,eACxB,OAGD,MAAMpC,EAAW,IAAIU,EAASsB,GAC9BD,EAAOtC,KAAKO,GAER+B,EAAOjC,OAASI,EAAQJ,QAC3BiC,EAAOvB,QAGJN,EAAQN,MAAMmC,KAGjBA,EAAOO,OAAO,GACdV,EAAGW,MAAM/C,KAAMgD,cAKZC,EAAO,CAACvB,EAAWU,EAAIjB,KACvBvB,EAASsD,IAAIxB,IACjB9B,EAASuD,IAAIzB,EAAW,IAAIM,KAG7B,MAAMoB,EAAoBxD,EAASyD,IAAI3B,GAEvC,GAAI0B,EAAkBF,IAAId,GAEzB,OAGD,MAAMkB,EAAYnB,EAAgBT,EAAWU,EAAIjB,GAEjDwB,SAASY,iBAAiB,UAAWD,GACrCF,EAAkBD,IAAIf,EAAIkB,IAGrBE,EAAS,CAAC9B,EAAWU,KAC1B,MAAMgB,EAAoBxD,EAASyD,IAAI3B,GAEvC,IAAK0B,EACJ,OAGD,MAAME,EAAYF,EAAkBC,IAAIjB,GAExCO,SAASc,oBAAoB,UAAWH,GACxCF,EAAkBM,OAAOtB,IAGpBM,EAAU,SAAUiB,GACzB,MAAMC,EAAWD,EAASC,SAAS7B,cAEnC,IAAIW,GAAU,EAEd,GAAI,CAAC,WAAY,UAAUD,SAASmB,GACnClB,GAAU,OACJ,GAAiB,UAAbkB,EAAsB,CAChClB,GAAU,EAEV,MAAMmB,GAAaF,EAASG,WAAWC,MAAMC,OAAS,QAAQjC,cAE1D,CAAC,SAAU,WAAY,QAAS,OAAQ,SAAU,QAAS,QAAS,QAAS,QAAS,UAAUU,SAASoB,KAC5GnB,GAAU,QAEDiB,EAASM,oBACnBvB,GAAU,GAGX,OAAOA,GAGFG,EAAc,SAAUc,GAG7B,IAAId,GAAc,EAUlB,MARiB,UAJAc,EAASC,SAAS7B,eAOhB,cAFC4B,EAASG,WAAWC,MAAMC,OAAS,QAAQjC,gBAG7Dc,GAAc,GAITA,GC/GFqB,EAAcC,GACX3B,IACKG,SAASyB,cAAc,oBAC/BC,YAAcF,GAIpBlB,EAAK,IAAKiB,EAAW,4BACrBjB,EAAK,SAAUiB,EAAW,0BAA6B,CAAEhC,cAAc,IAGvE,MAAMoC,EAAa,kDACbC,EAAQL,EAAW,uBACzBjB,EAAKqB,EAAYC,GAEjB5B,SAASyB,cAAc,uBAAuBb,iBAAiB,SAAUf,GAAMgB,EAAOc,EAAYC,KAElG,MAAMC,EAASN,EAAW,2BAC1BvB,SAASyB,cAAc,YAAYb,iBAAiB,SAAUf,GAAMS,EAAK,IAAKuB,EAAQ,CAAEtC,cAAc,MACtGS,SAASyB,cAAc,cAAcb,iBAAiB,SAAUf,GAAMgB,EAAO,IAAKgB,M","file":"bundle.js","sourcesContent":["class KeyBind extends Array {\r\n\tconstructor(bindingString) {\r\n\t\tif (!(typeof bindingString === 'string')) {\r\n\t\t\tthrow new RangeError(`KeyBind: Constructor argument must be a string`);\r\n\t\t}\r\n\r\n\t\tsuper(0);\r\n\r\n\t\tconst bindings = bindingString.trim().split(/\\s+/g);\r\n\r\n\t\tfor (const binding of bindings) {\r\n\t\t\tthis.push(binding);\r\n\t\t}\r\n\t}\r\n\r\n\ttoString() {\r\n\t\treturn this.join(' ');\r\n\t}\r\n\r\n\tmatch(keyPresses) {\r\n\t\tif (keyPresses.length !== this.length) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tfor (const [i, keyPress] of keyPresses.entries()) {\r\n\t\t\tconst keyBind = this[i];\r\n\r\n\t\t\tif (!keyPress.match(keyBind)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport { KeyBind };\r\n","const Patterns = Object.freeze({\r\n\talt: /\\balt\\+/g,\r\n\tctrl: /\\b(control|ctrl|command|cmd|meta)\\+/g,\r\n\tshift: /\\bshift\\+/g,\r\n});\r\n\r\nconst Aliases = Object.freeze({\r\n\t'space': ' ',\r\n\t'spacebar': ' ',\r\n\r\n\t'up': 'arrowup',\r\n\t'right': 'arrowright',\r\n\t'down': 'arrowdown',\r\n\t'left': 'arrowleft',\r\n\r\n\t'esc': 'escape',\r\n});\r\n\r\nclass KeyPress {\r\n\tconstructor(options) {\r\n\t\tif (!('key' in options)) {\r\n\t\t\tthrow new RangeError(`KeyPress: key is a required option`);\r\n\t\t}\r\n\t\tthis.key = options.key;\r\n\t\tthis.modifiers = {\r\n\t\t\taltKey: options.altKey || false,\r\n\t\t\tctrlKey: options.metaKey || options.ctrlKey || false,\r\n\t\t\tshiftKey: options.shiftKey || false,\r\n\t\t};\r\n\t}\r\n\r\n\tmatch(keyString) {\r\n\t\tconst requiredModifiers = {\r\n\t\t\taltKey: false,\r\n\t\t\tctrlKey: false,\r\n\t\t\tshiftKey: false,\r\n\t\t};\r\n\r\n\t\t// Gather required modifiers for keyString\r\n\t\tif (Patterns.alt.test(keyString)) {\r\n\t\t\trequiredModifiers.altKey = true;\r\n\t\t\tkeyString = keyString.replace(Patterns.alt, '');\r\n\t\t}\r\n\r\n\t\tif (Patterns.ctrl.test(keyString)) {\r\n\t\t\trequiredModifiers.ctrlKey = true;\r\n\t\t\tkeyString = keyString.replace(Patterns.ctrl, '');\r\n\t\t}\r\n\r\n\t\tif (Patterns.shift.test(keyString)) {\r\n\t\t\trequiredModifiers.shiftKey = true;\r\n\t\t\tkeyString = keyString.replace(Patterns.shift, '');\r\n\t\t}\r\n\r\n\t\t// Check if all keyString's required modifiers were met\r\n\t\tfor (const modifier in requiredModifiers) {\r\n\t\t\tif (requiredModifiers[modifier] && !this.modifiers[modifier]) {\r\n\t\t\t\t// The modifier was required but not recorded\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check if they keyString's key matches the key pressed\r\n\t\tif (keyString.toLowerCase() === this.key.toLowerCase()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Check if the keyString is an alias for a matching key\r\n\t\tif (Aliases[keyString.toLowerCase()] === this.key.toLowerCase()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport { KeyPress };\r\n","import { KeyBind } from './KeyBind.js';\nimport { KeyPress } from './KeyPress.js';\n\nconst bindings = new Map();\n/**\n<Map>{\n\t[keyString]: <Map>{\n\t\t[fn]: fnWrapper,\n\t},\n};\n*/\n\nconst defaults = Object.freeze({\n\tallowInInput: false,\n});\n\nconst createFnWrapper = (keyString, fn, opts) => {\n\tconst options = Object.assign({}, defaults, opts);\n\n\tconst keyBind = new KeyBind(keyString);\n\tconst keyLog = [];\n\n\treturn function (e) {\n\t\t// Ignore modifier keys\n\t\tif (['Alt', 'Control', 'Meta', 'Shift'].includes(e.key)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Don't check key if focus is in a prohibited place\n\t\tif ((!options.allowInInput) && isInput(document.activeElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (isProtected(document.activeElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyPress = new KeyPress(e);\n\t\tkeyLog.push(keyPress);\n\n\t\tif (keyLog.length > keyBind.length) {\n\t\t\tkeyLog.shift();\n\t\t}\n\n\t\tif (keyBind.match(keyLog)) {\n\t\t\t// Clear keyLog and call function\n\n\t\t\tkeyLog.splice(0);\n\t\t\tfn.apply(this, arguments);\n\t\t}\n\t};\n};\n\nconst bind = (keyString, fn, options) => {\n\tif (!bindings.has(keyString)) {\n\t\tbindings.set(keyString, new Map());\n\t}\n\n\tconst keyStringBindings = bindings.get(keyString);\n\n\tif (keyStringBindings.has(fn)) {\n\t\t// Do nothing - this binding already exists\n\t\treturn;\n\t}\n\n\tconst fnWrapper = createFnWrapper(keyString, fn, options);\n\n\tdocument.addEventListener('keydown', fnWrapper);\n\tkeyStringBindings.set(fn, fnWrapper);\n};\n\nconst unbind = (keyString, fn) => {\n\tconst keyStringBindings = bindings.get(keyString);\n\n\tif (!keyStringBindings) {\n\t\treturn;\n\t}\n\n\tconst fnWrapper = keyStringBindings.get(fn);\n\n\tdocument.removeEventListener('keydown', fnWrapper);\n\tkeyStringBindings.delete(fn);\n};\n\nconst isInput = function ($element) {\n\tconst nodeName = $element.nodeName.toLowerCase();\n\n\tlet isInput = false;\n\n\tif (['textarea', 'select'].includes(nodeName)) {\n\t\tisInput = true;\n\t} else if (nodeName === 'input') {\n\t\tisInput = true;\n\n\t\tconst inputType = ($element.attributes.type?.value || 'text').toLowerCase();\n\n\t\tif (['button', 'checkbox', 'color', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'].includes(inputType)) {\n\t\t\tisInput = false;\n\t\t}\n\t} else if ($element.isContentEditable) {\n\t\tisInput = true;\n\t}\n\n\treturn isInput;\n};\n\nconst isProtected = function ($element) {\n\tconst nodeName = $element.nodeName.toLowerCase();\n\n\tlet isProtected = false;\n\n\tif (nodeName === 'input') {\n\t\tconst inputType = ($element.attributes.type?.value || 'text').toLowerCase();\n\n\t\tif (inputType === 'password') {\n\t\t\tisProtected = true;\n\t\t}\n\t}\n\n\treturn isProtected;\n};\n\nexport {\n\tbind,\n\tunbind,\n};\n","import {\n\tbind,\n\tunbind,\n\n\tbindSequence,\n\tunbindSequence,\n} from '/keybinding.js';\n\nconst setMessage = (message) => {\n\treturn (e) => {\n\t\tconst $el = document.querySelector('.js-text-message');\n\t\t$el.textContent = message;\n\t};\n};\n\nbind('a', setMessage('You pressed the \\'a\\' key'));\nbind('ctrl+m', setMessage('You pressed Ctrl + \\'m\\''), { allowInInput: true });\n\n\nconst konamiCode = 'up up down down left right left right b a enter';\nconst cheat = setMessage('Hey, stop cheating!');\nbind(konamiCode, cheat);\n\ndocument.querySelector('.js-unbind-sequence').addEventListener('click', (e) => unbind(konamiCode, cheat));\n\nconst kPress = setMessage('You pressed the \\'k\\' key');\ndocument.querySelector('.js-bind').addEventListener('click', (e) => bind('k', kPress, { allowInInput: true }));\ndocument.querySelector('.js-unbind').addEventListener('click', (e) => unbind('k', kPress));\n"],"sourceRoot":""}