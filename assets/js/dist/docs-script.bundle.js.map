{"version":3,"file":"docs-script.bundle.js","mappings":"mBAEA,MAAMA,UAAgBC,MASrBC,YAAYC,GACX,GAA+B,iBAAlBA,EACZ,MAAM,IAAIC,WAAW,kDAGtBC,MAAM,GAEN,MAAMC,EAAWH,EAAcI,OAAOC,MAAM,QAE5C,IAAK,MAAMC,KAAWH,EACrBI,KAAKC,KAAKF,GASZG,WACC,OAAOF,KAAKG,KAAK,KAWlBC,MAAMC,GACL,GAAIA,EAAWC,SAAWN,KAAKM,OAC9B,OAAO,EAGR,IAAK,MAAOC,EAAGC,KAAaH,EAAWI,UAAW,CACjD,MAAMC,EAAUV,KAAKO,GAErB,IAAKC,EAASJ,MAAMM,GACnB,OAAO,EAIT,OAAO,GCvDT,MAAMC,EAAWC,OAAOC,OAAO,CAC9BC,IAAK,WACLC,KAAM,uCACNC,MAAO,eAGFC,EAAU,IAAIC,IAAI,CACvB,CAAC,QAAS,KACV,CAAC,WAAY,KAEb,CAAC,KAAM,WACP,CAAC,QAAS,cACV,CAAC,OAAQ,aACT,CAAC,OAAQ,aAET,CAAC,MAAO,YAiBT,MAAMC,EACLC,IACAC,UAeA7B,YAAY8B,GACX,KAAM,QAASA,GACd,MAAM,IAAI5B,WAAW,sCAEtBM,KAAKoB,IAAME,EAAQF,IACnBpB,KAAKqB,UAAY,CAChBE,OAAQD,EAAQC,SAAU,EAC1BC,QAASF,EAAQG,SAAWH,EAAQE,UAAW,EAC/CE,SAAUJ,EAAQI,WAAY,GAahCtB,MAAMuB,GACL,MAAMC,EAAoB,CACzBL,QAAQ,EACRC,SAAS,EACTE,UAAU,GAoBX,IAAIG,EACJ,IAAKA,KAjBDlB,EAASG,IAAIgB,KAAKH,KACrBC,EAAkBL,QAAS,EAC3BI,EAAYA,EAAUI,QAAQpB,EAASG,IAAK,KAGzCH,EAASI,KAAKe,KAAKH,KACtBC,EAAkBJ,SAAU,EAC5BG,EAAYA,EAAUI,QAAQpB,EAASI,KAAM,KAG1CJ,EAASK,MAAMc,KAAKH,KACvBC,EAAkBF,UAAW,EAC7BC,EAAYA,EAAUI,QAAQpB,EAASK,MAAO,KAK9BY,EAChB,GAAIA,EAAkBC,KAAc7B,KAAKqB,UAAUQ,GAElD,OAAO,EAKT,OAAIF,EAAUK,gBAAkBhC,KAAKoB,IAAIY,eAKrCf,EAAQgB,IAAIN,EAAUK,iBAAmBhC,KAAKoB,IAAIY,eClGxD,MAAMpC,EAAgE,IAAIsB,IAEpEgB,EAAWtB,OAAOC,OAAO,CAC9BsB,cAAc,IAiBTC,EAAkB,CAACT,EAAmBU,EAAkBC,KAC7D,MAAMhB,EAAUV,OAAO2B,OAAO,GAAIL,EAAUI,GAEtC5B,EAAU,IAAIpB,EAAQqC,GACtBa,EAAS,GAgCf,OA9BuC,SAAqBC,KAAqBC,GAEhF,GAAI,CAAC,MAAO,UAAW,OAAQ,SAASC,SAASF,EAAErB,KAClD,OAID,IAAME,EAAQa,cAAiBS,EAAQC,SAASC,eAC/C,OAGD,GAAIC,EAAYF,SAASC,eACxB,OAGD,MAAMtC,EAAW,IAAIW,EAASsB,GAC9BD,EAAOvC,KAAKO,GAERgC,EAAOlC,OAASI,EAAQJ,QAC3BkC,EAAOxB,QAGJN,EAAQN,MAAMoC,KAGjBA,EAAOQ,OAAO,GACdX,EAAGY,MAAMjD,KAAM,CAACyC,KAAMC,OAiBnBQ,EAAO,CAACvB,EAAmBU,EAAgCf,KAC3D1B,EAASuD,IAAIxB,IACjB/B,EAASwD,IAAIzB,EAAW,IAAIT,KAG7B,MAAMmC,EAAoBzD,EAASqC,IAAIN,GAEvC,GAAI0B,EAAkBF,IAAId,GAEzB,OAGD,MAAMiB,EAAYlB,EAAgBT,EAAWU,EAAIf,GAEjDuB,SAASU,iBAAiB,UAAWD,GACrCD,EAAkBD,IAAIf,EAAIiB,IAWrBE,EAAS,CAAC7B,EAAmBU,KAClC,MAAMgB,EAAoBzD,EAASqC,IAAIN,GAEvC,IAAK0B,EACJ,OAGD,MAAMC,EAAYD,EAAkBpB,IAAII,GAEpCiB,IACHT,SAASY,oBAAoB,UAAWH,GACxCD,EAAkBK,OAAOrB,KAYrBO,EAAU,SAAUe,GACzB,IAAIf,GAAU,EAEd,GAAIe,aAAoBC,YACvB,GAAID,aAAoBE,qBAAuBF,aAAoBG,kBAClElB,GAAU,OACJ,GAAIe,aAAoBI,iBAAkB,CAChDnB,GAAU,EAEV,MAAMoB,GAAaL,EAASM,MAAQ,QAAQjC,cAExC,CAAC,SAAU,WAAY,QAAS,OAAQ,SAAU,QAAS,QAAS,QAAS,QAAS,UAAUW,SAASqB,KAC5GpB,GAAU,QAEDe,EAASO,oBACnBtB,GAAU,GAIZ,OAAOA,GAWFG,EAAc,SAAUY,GAC7B,IAAIZ,GAAc,EAUlB,OARIY,aAAoBI,kBAGL,cAFCJ,EAASM,MAAQ,QAAQjC,gBAG3Ce,GAAc,GAITA,GCpKFoB,EAAcC,GACX3B,IACP,MAAM4B,EAAMxB,SAASyB,cAAc,oBAC/BD,IACHA,EAAIE,YAAcH,IAKrBlB,EAAK,IAAKiB,EAAW,4BACrBjB,EAAK,SAAUiB,EAAW,0BAA6B,CAAEhC,cAAc,IAGvE,MAAMqC,EAAa,kDACbC,EAAQN,EAAW,uBACzBjB,EAAKsB,EAAYC,GAEjB5B,SAASyB,cAAc,wBAAwBf,iBAAiB,SAAUd,GAAMe,EAAOgB,EAAYC,KAEnG,MAAMC,EAASP,EAAW,2BAC1BtB,SAASyB,cAAc,aAAaf,iBAAiB,SAAUd,GAAMS,EAAK,IAAKwB,EAAQ,CAAEvC,cAAc,MACvGU,SAASyB,cAAc,eAAef,iBAAiB,SAAUd,GAAMe,EAAO,IAAKkB,M","sources":["webpack://@cipscis/keybinding/./src/KeyBind.ts","webpack://@cipscis/keybinding/./src/KeyPress.ts","webpack://@cipscis/keybinding/./src/keybinding.ts","webpack://@cipscis/keybinding/./docs/assets/js/src/docs-script.ts"],"sourcesContent":["import { KeyPress } from './KeyPress.js';\n\nclass KeyBind extends Array {\n\t/**\n\t * Creates a special KeyBind array based on a string representation of a\n\t *   key, key combination, or key sequence.\n\t *\n\t * @constructor\n\t *\n\t * @param {string} bindingString - A string representing a key, key combination, or key sequence. For example, 'esc' or 'Ctrl+G Ctrl+D'.\n\t */\n\tconstructor(bindingString: string) {\n\t\tif (!(typeof bindingString === 'string')) {\n\t\t\tthrow new RangeError(`KeyBind: Constructor argument must be a string`);\n\t\t}\n\n\t\tsuper(0);\n\n\t\tconst bindings = bindingString.trim().split(/\\s+/g);\n\n\t\tfor (const binding of bindings) {\n\t\t\tthis.push(binding);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a string representation of a KeyBind.\n\t *\n\t * @return {string}\n\t */\n\ttoString(): string {\n\t\treturn this.join(' ');\n\t}\n\n\t/**\n\t * Checks whether or not a given set of KeyPresses matches the current\n\t *   KeyBind's criteria.\n\t *\n\t * @param  {KeyPress[]} keyPresses - The KeyPresses to check against.\n\t *\n\t * @return {boolean}\n\t */\n\tmatch(keyPresses: KeyPress[]): boolean {\n\t\tif (keyPresses.length !== this.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const [i, keyPress] of keyPresses.entries()) {\n\t\t\tconst keyBind = this[i];\n\n\t\t\tif (!keyPress.match(keyBind)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nexport { KeyBind };\n","const Patterns = Object.freeze({\n\talt: /\\balt\\+/g,\n\tctrl: /\\b(control|ctrl|command|cmd|meta)\\+/g,\n\tshift: /\\bshift\\+/g,\n});\n\nconst Aliases = new Map([\n\t['space', ' '],\n\t['spacebar', ' '],\n\n\t['up', 'arrowup'],\n\t['right', 'arrowright'],\n\t['down', 'arrowdown'],\n\t['left', 'arrowleft'],\n\n\t['esc', 'escape'],\n]);\n\ninterface KeyPressOptions {\n\tkey: string;\n\taltKey?: boolean;\n\tmetaKey?: boolean;\n\tctrlKey?: boolean;\n\tshiftKey?: boolean;\n}\n\ninterface KeyPressModifiers {\n\taltKey?: boolean;\n\tctrlKey?: boolean;\n\tshiftKey?: boolean;\n};\n\nclass KeyPress {\n\tkey: string;\n\tmodifiers: KeyPressModifiers;\n\n\t/**\n\t * Creates a recording of a key press, including any modifier keys that were\n\t *   pressed at the time.\n\t *\n\t * @constructor\n\t *\n\t * @param {Object} options - Can accept a KeyboardEvent.\n\t * @param {string} options.key - The key that was pressed.\n\t * @param {boolean?} altKey - Whether or not the Alt key was pressed.\n\t * @param {boolean?} metaKey - Whether or not the Meta key was pressed.\n\t * @param {boolean?} ctrlKey - Whether or not the Ctrl key was pressed.\n\t * @param {boolean?} shiftKey - Whether or not the Shift key was pressed.\n\t */\n\tconstructor(options: KeyPressOptions | KeyboardEvent) {\n\t\tif (!('key' in options)) {\n\t\t\tthrow new RangeError(`KeyPress: key is a required option`);\n\t\t}\n\t\tthis.key = options.key;\n\t\tthis.modifiers = {\n\t\t\taltKey: options.altKey || false,\n\t\t\tctrlKey: options.metaKey || options.ctrlKey || false,\n\t\t\tshiftKey: options.shiftKey || false,\n\t\t};\n\t}\n\n\t/**\n\t * Checks whether or not a given string representing a key or a key\n\t *   combination matches the current recorded KeyPress.\n\t *\n\t * @param  {string} keyString A string representing a key or key\n\t *   combination. For example, 'esc' or 'Ctrl+G'.\n\t *\n\t * @return {boolean}\n\t */\n\tmatch(keyString: string): boolean {\n\t\tconst requiredModifiers = {\n\t\t\taltKey: false,\n\t\t\tctrlKey: false,\n\t\t\tshiftKey: false,\n\t\t} as KeyPressModifiers;\n\n\t\t// Gather required modifiers for keyString\n\t\tif (Patterns.alt.test(keyString)) {\n\t\t\trequiredModifiers.altKey = true;\n\t\t\tkeyString = keyString.replace(Patterns.alt, '');\n\t\t}\n\n\t\tif (Patterns.ctrl.test(keyString)) {\n\t\t\trequiredModifiers.ctrlKey = true;\n\t\t\tkeyString = keyString.replace(Patterns.ctrl, '');\n\t\t}\n\n\t\tif (Patterns.shift.test(keyString)) {\n\t\t\trequiredModifiers.shiftKey = true;\n\t\t\tkeyString = keyString.replace(Patterns.shift, '');\n\t\t}\n\n\t\t// Check if all keyString's required modifiers were met\n\t\tlet modifier: keyof typeof requiredModifiers;\n\t\tfor (modifier in requiredModifiers) {\n\t\t\tif (requiredModifiers[modifier] && !this.modifiers[modifier]) {\n\t\t\t\t// The modifier was required but not recorded\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if they keyString's key matches the key pressed\n\t\tif (keyString.toLowerCase() === this.key.toLowerCase()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check if the keyString is an alias for a matching key\n\t\tif (Aliases.get(keyString.toLowerCase()) === this.key.toLowerCase()) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nexport { KeyPress };\n","import { KeyBind } from './KeyBind.js';\nimport { KeyPress } from './KeyPress.js';\n\ntype KeybindingFn = (e: KeyboardEvent, ...otherArgs: unknown[]) => any;\ntype KeybindingFnWrapper = (this: any, e: KeyboardEvent, ...otherArgs: unknown[]) => void;\n\ninterface KeyBindingOptions {\n\tallowInInput?: boolean;\n}\n\nconst bindings: Map<string, Map<KeybindingFn, KeybindingFnWrapper>> = new Map();\n\nconst defaults = Object.freeze({\n\tallowInInput: false,\n});\n\n/**\n * Creates a wrapper for a callback function, which handles recording and\n *   checking keypresses so it can be bound directly to the 'keydown' event and\n *   decide when the callback should be invoked.\n *\n * @param {string} keyString - A string representing the key, key combination,\n *   or key sequence the callback should to be bound to. For example, 'esc' or\n *   'Ctrl+G Ctrl+D'.\n * @param {function} fn - The function to be bound.\n * @param {Object} options - Options to configure behaviour of the key binding.\n * @param {boolean} options.allowInInput - If set to true, the key binding will remain active while keyboard focus is in an element that can receive keyboard input, such as <input type=\"text\">.\n *\n * @return {function}\n */\nconst createFnWrapper = (keyString: string, fn: KeybindingFn, opts?: KeyBindingOptions): KeybindingFnWrapper => {\n\tconst options = Object.assign({}, defaults, opts);\n\n\tconst keyBind = new KeyBind(keyString);\n\tconst keyLog = [] as KeyPress[];\n\n\tconst fnWrapper: KeybindingFnWrapper = function (this: any, e: KeyboardEvent, ...otherArgs: unknown[]) {\n\t\t// Ignore modifier keys\n\t\tif (['Alt', 'Control', 'Meta', 'Shift'].includes(e.key)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Don't check key if focus is in a prohibited place\n\t\tif ((!options.allowInInput) && isInput(document.activeElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (isProtected(document.activeElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyPress = new KeyPress(e);\n\t\tkeyLog.push(keyPress);\n\n\t\tif (keyLog.length > keyBind.length) {\n\t\t\tkeyLog.shift();\n\t\t}\n\n\t\tif (keyBind.match(keyLog)) {\n\t\t\t// Clear keyLog and call function\n\n\t\t\tkeyLog.splice(0);\n\t\t\tfn.apply(this, [e, ...otherArgs]);\n\t\t}\n\t};\n\n\treturn fnWrapper;\n};\n\n/**\n * Binds an event to a key, key combination, or key sequence.\n *\n * @param {string} keyString - A string representing the key, key combination, or key sequence to be bound to. For example, 'esc' or 'Ctrl+G Ctrl+D'.\n * @param {function} fn - The function to be bound. When called, behaves as though it had been bound by document.addEventListener.\n * @param {Object} options - Options to configure behaviour of the key binding.\n * @param {boolean} options.allowInInput - If set to true, the key binding will remain active while keyboard focus is in an element that can receive keyboard input, such as <input type=\"text\">.\n *\n * @return {void}\n */\nconst bind = (keyString: string, fn: (e: KeyboardEvent) => void, options?: KeyBindingOptions): void => {\n\tif (!bindings.has(keyString)) {\n\t\tbindings.set(keyString, new Map());\n\t}\n\n\tconst keyStringBindings = bindings.get(keyString) as Map<KeybindingFn, KeybindingFnWrapper>;\n\n\tif (keyStringBindings.has(fn)) {\n\t\t// Do nothing - this binding already exists\n\t\treturn;\n\t}\n\n\tconst fnWrapper = createFnWrapper(keyString, fn, options);\n\n\tdocument.addEventListener('keydown', fnWrapper);\n\tkeyStringBindings.set(fn, fnWrapper);\n};\n\n/**\n * Unbind an event from a key, key combination, or key sequence.\n *\n * @param {string} keyString - A string representing the key, key combination, or key sequence to unbind from. For example, 'esc' or 'Ctrl+G Ctrl+D'.\n * @param {function} fn - The function to be unbound.\n *\n * @return {void}\n */\nconst unbind = (keyString: string, fn: KeybindingFn): void => {\n\tconst keyStringBindings = bindings.get(keyString);\n\n\tif (!keyStringBindings) {\n\t\treturn;\n\t}\n\n\tconst fnWrapper = keyStringBindings.get(fn);\n\n\tif (fnWrapper) {\n\t\tdocument.removeEventListener('keydown', fnWrapper);\n\t\tkeyStringBindings.delete(fn);\n\t}\n};\n\n/**\n * Check if a given HTMLElement is able to receive keyboard input.\n *\n * @param  {Element | null} $element - The element to check. If it is not an\n *   HTMLElement, the function will return false.\n *\n * @return {boolean}\n */\nconst isInput = function ($element: Element | null): boolean {\n\tlet isInput = false;\n\n\tif ($element instanceof HTMLElement) {\n\t\tif ($element instanceof HTMLTextAreaElement || $element instanceof HTMLSelectElement) {\n\t\t\tisInput = true;\n\t\t} else if ($element instanceof HTMLInputElement) {\n\t\t\tisInput = true;\n\n\t\t\tconst inputType = ($element.type || 'text').toLowerCase();\n\n\t\t\tif (['button', 'checkbox', 'color', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'].includes(inputType)) {\n\t\t\t\tisInput = false;\n\t\t\t}\n\t\t} else if ($element.isContentEditable) {\n\t\t\tisInput = true;\n\t\t}\n\t}\n\n\treturn isInput;\n};\n\n/**\n * Check if keyboard input to an HTMLElement should never be tracked.\n *\n * @param  {Element | null} $element - The element to check. If it is not an\n *   HTMLElement, the function will return false.\n *\n * @return {boolean}\n */\nconst isProtected = function ($element: Element | null): boolean {\n\tlet isProtected = false;\n\n\tif ($element instanceof HTMLInputElement) {\n\t\tconst inputType = ($element.type || 'text').toLowerCase();\n\n\t\tif (inputType === 'password') {\n\t\t\tisProtected = true;\n\t\t}\n\t}\n\n\treturn isProtected;\n};\n\nexport {\n\tbind,\n\tunbind,\n};\n","import {\n\tbind,\n\tunbind,\n} from '@cipscis/keybinding';\n\nconst setMessage = (message: string) => {\n\treturn (e: Event): void => {\n\t\tconst $el = document.querySelector('.js-text-message');\n\t\tif ($el) {\n\t\t\t$el.textContent = message;\n\t\t}\n\t};\n};\n\nbind('a', setMessage('You pressed the \\'a\\' key'));\nbind('ctrl+m', setMessage('You pressed Ctrl + \\'m\\''), { allowInInput: true });\n\n\nconst konamiCode = 'up up down down left right left right b a enter';\nconst cheat = setMessage('Hey, stop cheating!');\nbind(konamiCode, cheat);\n\ndocument.querySelector('.js-unbind-sequence')?.addEventListener('click', (e) => unbind(konamiCode, cheat));\n\nconst kPress = setMessage('You pressed the \\'k\\' key');\ndocument.querySelector('.js-bind')?.addEventListener('click', (e) => bind('k', kPress, { allowInInput: true }));\ndocument.querySelector('.js-unbind')?.addEventListener('click', (e) => unbind('k', kPress));\n"],"names":["KeyBind","Array","constructor","bindingString","RangeError","super","bindings","trim","split","binding","this","push","toString","join","match","keyPresses","length","i","keyPress","entries","keyBind","Patterns","Object","freeze","alt","ctrl","shift","Aliases","Map","KeyPress","key","modifiers","options","altKey","ctrlKey","metaKey","shiftKey","keyString","requiredModifiers","modifier","test","replace","toLowerCase","get","defaults","allowInInput","createFnWrapper","fn","opts","assign","keyLog","e","otherArgs","includes","isInput","document","activeElement","isProtected","splice","apply","bind","has","set","keyStringBindings","fnWrapper","addEventListener","unbind","removeEventListener","delete","$element","HTMLElement","HTMLTextAreaElement","HTMLSelectElement","HTMLInputElement","inputType","type","isContentEditable","setMessage","message","$el","querySelector","textContent","konamiCode","cheat","kPress"],"sourceRoot":""}